<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="lcpp::Ptr&lt;*&gt;">
        <DisplayString Condition="m_pPtr == nullptr">nullptr</DisplayString>
        <DisplayString>{m_pPtr}</DisplayString>
        <Expand>
            <Item Name="[ptr]">m_pPtr</Item>
            <ExpandedItem>*m_pPtr</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="lcpp::Ptr &lt; lcpp::LispObject &gt;">
        <DisplayString Condition="m_pPtr == nullptr">nullptr</DisplayString>
        <DisplayString>{*((lcpp::LispObject*)m_pPtr)}</DisplayString>
        <Expand>
            <ExpandedItem>*((lcpp::LispObject*)m_pPtr)</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="lcpp::CollectableBase">
        <DisplayString>{*m_pMetaInfo.m_pPtr}</DisplayString>
        <Expand>
            <Item Name="GC">*m_pGarbageCollector.m_pPtr</Item>
            <Item Name="MetaInfo">*m_pMetaInfo.m_pPtr</Item>
        </Expand>
    </Type>

    <!--
        Nil          = 0
        Void         = 1
        True         = 2
        False        = 3
        Integer      = 4
        Float        = 5
        Symbol       = 6
        String       = 7
        Stream       = 8
        Cons         = 9
        Lambda       = 10
        Syntax       = 11
        Environment  = 12
        File         = 13
        Continuation = 14
        Time         = 15
    -->

    <Type Name="lcpp::LispObject">
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  0">Nil '()</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  1">Void #v</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  2">True #t</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  3">False #f</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  4">{*((ezInt64*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  5">{*((double*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  6">{*((lcpp::symbol::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  7">{*((lcpp::str::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  8">{*((lcpp::stream::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  9">{*((lcpp::cons::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 12">{*((lcpp::env::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 13">{*((lcpp::file::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 14">{*((lcpp::cont::Data*)m_data)}</DisplayString>
        <DisplayString Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 15">{*((lcpp::time::Data*)m_data)}</DisplayString>
        <DisplayString>[Unknown Type] { ((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id }</DisplayString>
        <Expand>
            <ExpandedItem>((lcpp::CollectableBase*)this)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  4">*((ezInt64*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  5">*((double*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  6">*((lcpp::symbol::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  7">*((lcpp::str::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  8">*((lcpp::stream::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id ==  9">*((lcpp::cons::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 12">*((lcpp::env::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 13">*((lcpp::file::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 14">*((lcpp::cont::Data*)m_data)</ExpandedItem>
            <ExpandedItem Condition="((lcpp::CollectableBase*)this)->m_pMetaInfo.m_pPtr->m_type.m_id == 15">*((lcpp::time::Data*)m_data)</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="lcpp::MetaInfo">
        <DisplayString>{m_type}</DisplayString>
    </Type>

    <Type Name="lcpp::Type">
        <DisplayString>{m_id}</DisplayString>
    </Type>

    <Type Name="lcpp::Stack">
        <DisplayString>{m_stack}</DisplayString>
        <Expand>
            <Item Name="Allocator">m_pAllocator.m_pPtr</Item>
            <Item Name="NilElement">m_nilElement</Item>
            <ExpandedItem>m_stack</ExpandedItem>
        </Expand>
    </Type>

    <!-- type specific data -->

    <Type Name="lcpp::symbol::Data">
        <AlternativeType Name="lcpp::str::Data"/>
        <DisplayString>{((String*)m_pRawData)->m_Data.m_pElements,s8}</DisplayString>
        <StringView>((String*)m_pRawData)->m_Data.m_pElements,s8</StringView>
        <Expand>
            <Item Name="String Data">(String*)m_pRawData</Item>
        </Expand>
    </Type>

    <Type Name="lcpp::env::Data">
        <DisplayString>Name={*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)}</DisplayString>
        <Expand>
            <Item Name="Parent">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pParent)</Item>
            <Item Name="Name">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)</Item>
            <ExpandedItem>(ezHashTableBase&lt;lcpp::Ptr&lt;lcpp::LispObject&gt;,lcpp::Ptr&lt;lcpp::LispObject&gt;,ezHashHelper&lt;lcpp::Ptr&lt;lcpp::LispObject&gt; &gt; &gt; *)m_table</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="lcpp::cont::Data">
        <DisplayString>Function={m_pFunction,na}</DisplayString>
        <Expand>
            <Item Name="Function">m_pFunction,na</Item>
            <Item Name="Parent">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pParent)</Item>
            <Item Name="UserData">m_userData</Item>
            <Item Name="Stack">*((lcpp::Stack*)m_stack)</Item>
        </Expand>
    </Type>

    <Type Name="lcpp::stream::Data">
        <DisplayString>Current={((ezStringIterator*)m_iterator)->m_pCurrent,s8}</DisplayString>
        <StringView>((ezStringIterator*)m_iterator)->m_pCurrent,s8</StringView>
        <Expand>
            <ExpandedItem>*((ezStringIterator*)m_iterator)</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="lcpp::cons::Data">
        <Expand>
            <Item Name="Car">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pCar)</Item>
            <!-- Display Cdr as another cons, if it is a cons. -->
            <Item Name="Cdr" Condition="((lcpp::CollectableBase*)(((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pCdr)->m_pPtr))->m_pMetaInfo.m_pPtr->m_type.m_id != 9">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pCdr)</Item>
            <ExpandedItem    Condition="((lcpp::CollectableBase*)(((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pCdr)->m_pPtr))->m_pMetaInfo.m_pPtr->m_type.m_id == 9">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pCdr)</ExpandedItem>
        </Expand>
    </Type>

    <Type Name="lcpp::lambda::builtin::Data">
        <DisplayString>Name={*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)}, Function={m_pFunction,na}</DisplayString>
        <Expand>
            <Item Name="Name">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)</Item>
            <Item Name="Function">m_pFunction</Item>
            <Item Name="Environment">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pEnv)</Item>
        </Expand>
    </Type>

    <Type Name="lcpp::lambda::userDefined::Data">
        <DisplayString>Name={*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)}</DisplayString>
        <Expand>
            <Item Name="Name">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)</Item>
            <Item Name="Environment">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pEnv)</Item>
            <Item Name="ArgList">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pArgList)</Item>
            <Item Name="Body">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pBody)</Item>
        </Expand>
    </Type>

    <Type Name="lcpp::syntax::builtin::Data">
        <DisplayString>Name={*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)}, Function={m_pFunction,na}</DisplayString>
        <Expand>
            <Item Name="Name">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pName)</Item>
            <Item Name="Function">m_pFunction</Item>
        </Expand>
    </Type>

    <Type Name="lcpp::file::Data">
        <DisplayString>{*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pFileName)}</DisplayString>
        <Expand>
            <Synthetic Name="Open State" Condition="(*((ezOSFile*)m_file)).m_FileMode != ezFileMode::None">
                <DisplayString>File is open.</DisplayString>
            </Synthetic>
            <Synthetic Name="Open State" Condition="(*((ezOSFile*)m_file)).m_FileMode == ezFileMode::None">
                <DisplayString>File is closed.</DisplayString>
            </Synthetic>
            <Item Name="File">*((ezOSFile*)m_file)</Item>
            <Item Name="File Name">*((lcpp::Ptr&lt;lcpp::LispObject&gt;*)m_pFileName)</Item>
        </Expand>
    </Type>

</AutoVisualizer>
